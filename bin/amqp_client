#!/usr/bin/env ruby
# Starts up one or more amqp observers

# A note on config reloading:
# The checkpoints determine which messages get passed to
# the inboxes. They are stored in a Postgress database and
# change infrequently. They will be updated through the
# rails server, possibly on another host.
# Most message that come through will be irrelevant
# so re-loading the config for each one seems excessive.
# Instead we cache the configs for CONFIG_CACHE_INTERVAL
# (1m by default). This was favoured over trying to trigger
# automatic reloading, as the latter creates added complexity,
# especially when distributed systems and parrelelization are taken
# into account.

require 'daemons'
require './lib/postman'

APP_PATH = File.expand_path('../config/application', __dir__)

class AmqpClient

  APP_NAME = 'inbox_app_amqp_client'
  DEFAULT_THREADS = 2
  DEFAULT_WORKERS = 2
  DEFAULT_PID_DIR = './tmp/pids'

  NotImplimented = Class.new(StandardError)

  class WorkerPool

    def initialize(app_name,pid_dir,workers,threads,instance)
      @app_name = app_name
      @pid_dir = pid_dir
      @worker_count = workers
      @thread_count = threads
      @instance = instance
    end

    def worker_count
      @instance ? 1 : @worker_count
    end

    def start!
      worker_count.times do
        daemon
      end
    end

    def server_name
      @instance ? "#{@app_name}_num#{@instance}" : @app_name
    end

    def multiple
      @instance.nil?
    end

    # We preload our application before forking!
    def load_rails!
      puts "Loading application..."
      require_relative '../config/environment'
      # We need to disconnect before forking.
      ActiveRecord::Base.connection.disconnect!
      puts "Loaded!"
    end

    def daemon
      Daemons.run_proc(server_name, multiple: multiple, dir: @pid_dir, backtrace: true, log_output: true) do
        Postman.new(
          amqp_url: Rails.application.config.amqp_main_url,
          exchange_name: Rails.application.config.amqp_main_exchange,
          queue_name: "psd.#{@app_name}",
          routing_keys: Rails.application.config.amqp_main_routing_keys
        ).run!
      end
    end

  end

  attr_reader :workers, :threads, :instance, :pid_dir

  def initialize(args)
    @action = args.first
    self.workers = args.detect {|arg|  /\Aw[0-9]+\z/ === arg }
    self.threads = args.detect {|arg|  /\At[0-9]+\z/ === arg }
    self.instance = args.detect {|arg|  /\Ai[0-9]+\z/ === arg }
    self.pid_dir = args.detect {|arg| /\Apid_dir=.+\z/ === arg }
  end

  def workers=(workers_config)
    if workers_config.nil?
      @workers = DEFAULT_WORKERS
    else
      @workers = workers_config.slice(1,workers_config.length).to_i
    end
  end

  def threads=(threads_config)
    if threads_config.nil?
      @threads = DEFAULT_THREADS
    else
      raise NotImplimented, "Threaded Workers have not been implemented yet."
      @threads = threads_config.slice(1,threads_config.length).to_i
    end
  end

  def pid_dir=(pid_dir_config)
    if pid_dir_config.nil?
      @pid_dir = DEFAULT_PID_DIR
    else
      @pid_dir = /\Apid_dir=(.+)\z/.match(pid_dir_config)[1]
    end
  end

  def instance=(instance_config)
    unless instance_config.nil?
      @instance = instance_config.slice(1,instance_config.length).to_i
    end
  end

  def worker_pool
    @wp ||= WorkerPool.new(APP_NAME,pid_dir,workers,threads,instance)
  end

  def run
    if preload_required?
      worker_pool.load_rails!
    end
    start? ? worker_pool.start! : worker_pool.daemon
  end

  # Only bother loading rails if necessary
  def preload_required?
    ['start','restart','reload','run'].include?(@action)
  end

  def start?
    @action == 'start'
  end
end

AmqpClient.new(ARGV).run


